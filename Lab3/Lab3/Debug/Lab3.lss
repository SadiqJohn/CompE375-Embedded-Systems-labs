
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a9  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_intlize>:


// function to initialize UART
void USART_intlize (void)				
{
	UBRR0H  = (BAUDRATE>>8);			
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L  = BAUDRATE;					
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= ((1<<TXEN0)|(1<<RXEN0));	
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	UCSR0C |= ((1<<UCSZ00)|(1<<UCSZ01));
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <USART_transm>:
}

void USART_transm(unsigned char data)	
{
	while (! ( UCSR0A & (1<<UDRE0) ) );	
  b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <USART_transm>
	UDR0 = data;						
  be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c2:	08 95       	ret

000000c4 <main>:
							  {'7','8','9','C'},
							  {'*','0','#','D'}};

int main(void)
{
	USART_intlize();							
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <USART_intlize>
	unsigned int row = 0;
	unsigned int col = 0;
	
	//COLUMNS (OUTPUT)
	DDRB &= ~((1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB4)); 	//Set PORTB as input 0
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	88 7e       	andi	r24, 0xE8	; 232
  cc:	84 b9       	out	0x04, r24	; 4
		
	//ROWS (INPUT)
	DDRD |= ((1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7)); 		//Set PORTD as output 1
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= ((1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3));		//Pull-up resistor enabled by default at 1
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));		//Sets Ports on rows as outputs high
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	80 6f       	ori	r24, 0xF0	; 240
  de:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		for(row=0; row< 4; row++)
  e0:	e1 2c       	mov	r14, r1
  e2:	f1 2c       	mov	r15, r1
  e4:	3b c0       	rjmp	.+118    	; 0x15c <main+0x98>
		{
			PORTD &= ~(1<<(row+DDD4));						//Set PORT LOW one at a time to check
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	97 01       	movw	r18, r14
  ea:	2c 5f       	subi	r18, 0xFC	; 252
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	01 e0       	ldi	r16, 0x01	; 1
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x34>
  f4:	00 0f       	add	r16, r16
  f6:	11 1f       	adc	r17, r17
  f8:	2a 95       	dec	r18
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x30>
  fc:	90 2f       	mov	r25, r16
  fe:	90 95       	com	r25
 100:	89 23       	and	r24, r25
 102:	8b b9       	out	0x0b, r24	; 11
				for(col=0;col<=3; col++)
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	20 c0       	rjmp	.+64     	; 0x14a <main+0x86>
				{
					if (!(PINB & (1<<col)))				//Checking if push button is pressed
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0c 2e       	mov	r0, r28
 110:	02 c0       	rjmp	.+4      	; 0x116 <main+0x52>
 112:	95 95       	asr	r25
 114:	87 95       	ror	r24
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <main+0x4e>
 11a:	80 fd       	sbrc	r24, 0
 11c:	15 c0       	rjmp	.+42     	; 0x148 <main+0x84>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	95 ea       	ldi	r25, 0xA5	; 165
 122:	2e e0       	ldi	r18, 0x0E	; 14
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x60>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x6a>
 12e:	00 00       	nop
					{
						_delay_ms(300);					    //Delay for button bounce
						USART_transm(keypad[row][col]);		//Transmit the index [row][col]
 130:	f7 01       	movw	r30, r14
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	80 81       	ld	r24, Z
 144:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_transm>
	while (1)
	{
		for(row=0; row< 4; row++)
		{
			PORTD &= ~(1<<(row+DDD4));						//Set PORT LOW one at a time to check
				for(col=0;col<=3; col++)
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	c4 30       	cpi	r28, 0x04	; 4
 14c:	d1 05       	cpc	r29, r1
 14e:	e8 f2       	brcs	.-70     	; 0x10a <main+0x46>
					{
						_delay_ms(300);					    //Delay for button bounce
						USART_transm(keypad[row][col]);		//Transmit the index [row][col]
					}
					}
			PORTD |= (1<<(row+4));						//Set PORT back to HIGH after checking entire row
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	08 2b       	or	r16, r24
 154:	0b b9       	out	0x0b, r16	; 11
	PORTB |= ((1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3));		//Pull-up resistor enabled by default at 1
	PORTD |= ((1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));		//Sets Ports on rows as outputs high
	
	while (1)
	{
		for(row=0; row< 4; row++)
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	e8 1a       	sub	r14, r24
 15a:	f8 0a       	sbc	r15, r24
 15c:	94 e0       	ldi	r25, 0x04	; 4
 15e:	e9 16       	cp	r14, r25
 160:	f1 04       	cpc	r15, r1
 162:	08 f2       	brcs	.-126    	; 0xe6 <main+0x22>
 164:	bd cf       	rjmp	.-134    	; 0xe0 <main+0x1c>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
