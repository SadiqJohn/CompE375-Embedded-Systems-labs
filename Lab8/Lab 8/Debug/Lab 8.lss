
Lab 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000270  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba7  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000988  00000000  00000000  00000e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000489  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_14>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_15>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  c4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <CTC_intlize>:
#include <stdio.h>
#include <stdint.h>
#include <avr/eeprom.h>
void CTC_intlize(void)
{
	OCR0A = 155;                            		// Setting Timer0 for CTC, 10ms, 155
  cc:	8b e9       	ldi	r24, 0x9B	; 155
  ce:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << WGM01);
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00)|(1 << CS02);				// Set up timer with pre-scale = 1024, and ENABLE CTC mode
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A)|(1 << OCIE0B);			// Set the ISR COMPA vect and COMPB vect;
  dc:	ee e6       	ldi	r30, 0x6E	; 110
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
	sei(); //enable interrupts
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <__vector_14>:
}

ISR (TIMER0_COMPA_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	if(OCR0B != 0)
  f6:	88 b5       	in	r24, 0x28	; 40
  f8:	88 23       	and	r24, r24
  fa:	19 f0       	breq	.+6      	; 0x102 <__vector_14+0x18>
	LED_ON;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_15>:
ISR (TIMER0_COMPB_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
	if(OCR0B < 156)
 11a:	88 b5       	in	r24, 0x28	; 40
 11c:	8c 39       	cpi	r24, 0x9C	; 156
 11e:	18 f4       	brcc	.+6      	; 0x126 <__vector_15+0x18>
	LED_OFF;
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	85 b9       	out	0x05, r24	; 5
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <READ_WRITE_EEPROM>:
void READ_WRITE_EEPROM(void)
{
	uint8_t ReadByte;								
	uint8_t LoadByte;
	
	ReadByte = eeprom_read_byte((uint8_t*)0x33);	//Read BYTE in a location of EEPROM
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 bb 00 	call	0x176	; 0x176 <eeprom_read_byte>
			
	if(ReadByte < 155)								//Check if BYTE read is less than 155
 13a:	8b 39       	cpi	r24, 0x9B	; 155
 13c:	40 f4       	brcc	.+16     	; 0x14e <READ_WRITE_EEPROM+0x1c>
	{
		OCR0B = ReadByte;							//Set OCR0B as read BYTE
 13e:	88 bd       	out	0x28, r24	; 40
		LoadByte = ReadByte + 16;					//Add BYTE by 16(about 10% of 155)
 140:	60 e1       	ldi	r22, 0x10	; 16
 142:	68 0f       	add	r22, r24
		eeprom_write_byte((uint8_t*)0x33, LoadByte);//Load new value to EEPROM location
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 c3 00 	call	0x186	; 0x186 <eeprom_write_byte>
 14c:	08 95       	ret
	}
			
	else
	{
		OCR0B = 156;								//If BYTE read is greater than 155
 14e:	8c e9       	ldi	r24, 0x9C	; 156
 150:	88 bd       	out	0x28, r24	; 40
		LoadByte = 0;							//Reset OCR0B to zero on next turn on
		eeprom_write_byte((uint8_t*)0x33, LoadByte);//Reset BYTE in location to zero
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 c3 00 	call	0x186	; 0x186 <eeprom_write_byte>
 15c:	08 95       	ret

0000015e <main>:
	}		
}
int main(void)
{
	cli();
 15e:	f8 94       	cli
	DDRB  |= (1<<5);	// Set PinB5(LED) as an OUTPUT
 160:	84 b1       	in	r24, 0x04	; 4
 162:	80 62       	ori	r24, 0x20	; 32
 164:	84 b9       	out	0x04, r24	; 4
	LED_OFF;			// Default OFF
 166:	85 b1       	in	r24, 0x05	; 5
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	85 b9       	out	0x05, r24	; 5
	CTC_intlize();
 16c:	0e 94 66 00 	call	0xcc	; 0xcc <CTC_intlize>
	READ_WRITE_EEPROM();
 170:	0e 94 99 00 	call	0x132	; 0x132 <READ_WRITE_EEPROM>
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x16>

00000176 <eeprom_read_byte>:
 176:	f9 99       	sbic	0x1f, 1	; 31
 178:	fe cf       	rjmp	.-4      	; 0x176 <eeprom_read_byte>
 17a:	92 bd       	out	0x22, r25	; 34
 17c:	81 bd       	out	0x21, r24	; 33
 17e:	f8 9a       	sbi	0x1f, 0	; 31
 180:	99 27       	eor	r25, r25
 182:	80 b5       	in	r24, 0x20	; 32
 184:	08 95       	ret

00000186 <eeprom_write_byte>:
 186:	26 2f       	mov	r18, r22

00000188 <eeprom_write_r18>:
 188:	f9 99       	sbic	0x1f, 1	; 31
 18a:	fe cf       	rjmp	.-4      	; 0x188 <eeprom_write_r18>
 18c:	1f ba       	out	0x1f, r1	; 31
 18e:	92 bd       	out	0x22, r25	; 34
 190:	81 bd       	out	0x21, r24	; 33
 192:	20 bd       	out	0x20, r18	; 32
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	fa 9a       	sbi	0x1f, 2	; 31
 19a:	f9 9a       	sbi	0x1f, 1	; 31
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
