
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a94  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_7>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_14>
  3c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_15>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee eb       	ldi	r30, 0xBE	; 190
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 31       	cpi	r26, 0x14	; 20
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  ea:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Keypad_intlize>:


void Keypad_intlize(void)
{
	//column
	DDRB	&= ~((1<<0)|(1<<1)|(1<<2)|(1<<3));	
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	84 b9       	out	0x04, r24	; 4
	PORTB	|= ((1<<0)|(1<<1)|(1<<2)|(1<<3));	
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8f 60       	ori	r24, 0x0F	; 15
  fc:	85 b9       	out	0x05, r24	; 5
	//row
	DDRD	|= ((1<<4)|(1<<5)|(1<<6)|(1<<7)); 	
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	80 6f       	ori	r24, 0xF0	; 240
 102:	8a b9       	out	0x0a, r24	; 10
	PORTD	|= ((1<<4)|(1<<5)|(1<<6)|(1<<7));	
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	80 6f       	ori	r24, 0xF0	; 240
 108:	8b b9       	out	0x0b, r24	; 11
	//LED
	DDRB	|= (1<<5);							
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	84 b9       	out	0x04, r24	; 4
 110:	08 95       	ret

00000112 <scankey>:
								{0,0,0,249}};

void scankey(void)
{

	for(row=0; row< 4; row++)
 112:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <row+0x1>
 116:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <row>
 11a:	54 c0       	rjmp	.+168    	; 0x1c4 <scankey+0xb2>
	{
		PORTD &= ~(1<<(row+4));					// Set ROW OUTPUT as LOW one at a time to check
 11c:	4b b1       	in	r20, 0x0b	; 11
 11e:	2c 5f       	subi	r18, 0xFC	; 252
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <scankey+0x1a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	2a 95       	dec	r18
 12e:	e2 f7       	brpl	.-8      	; 0x128 <scankey+0x16>
 130:	80 95       	com	r24
 132:	84 23       	and	r24, r20
 134:	8b b9       	out	0x0b, r24	; 11
		
		for(col=0;col<=3; col++)
 136:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 13a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 13e:	22 c0       	rjmp	.+68     	; 0x184 <scankey+0x72>
		{
			if ((!(PINB & (1<<col))))				// Checking column to find which button is pressed
 140:	83 b1       	in	r24, 0x03	; 3
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <scankey+0x3a>
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <scankey+0x36>
 150:	80 fd       	sbrc	r24, 0
 152:	0f c0       	rjmp	.+30     	; 0x172 <scankey+0x60>
			{
						OCR0B = (keyboard[row][col]);		//Use the index [r][c] to set dimming percentage in the timer
 154:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <row>
 158:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <row+0x1>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	80 50       	subi	r24, 0x00	; 0
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	fc 01       	movw	r30, r24
 16a:	e2 0f       	add	r30, r18
 16c:	f3 1f       	adc	r31, r19
 16e:	80 81       	ld	r24, Z
 170:	88 bd       	out	0x28, r24	; 40

	for(row=0; row< 4; row++)
	{
		PORTD &= ~(1<<(row+4));					// Set ROW OUTPUT as LOW one at a time to check
		
		for(col=0;col<=3; col++)
 172:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 176:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 180:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 184:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 188:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 18c:	24 30       	cpi	r18, 0x04	; 4
 18e:	31 05       	cpc	r19, r1
 190:	b8 f2       	brcs	.-82     	; 0x140 <scankey+0x2e>
			{
						OCR0B = (keyboard[row][col]);		//Use the index [r][c] to set dimming percentage in the timer
	}
		}
		
		PORTD |= (1<<(row+4));					//Set PORT back to HIGH after checking entire row
 192:	4b b1       	in	r20, 0x0b	; 11
 194:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <row>
 198:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <row+0x1>
 19c:	2c 5f       	subi	r18, 0xFC	; 252
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <scankey+0x98>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	2a 95       	dec	r18
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <scankey+0x94>
 1ae:	84 2b       	or	r24, r20
 1b0:	8b b9       	out	0x0b, r24	; 11
								{0,0,0,249}};

void scankey(void)
{

	for(row=0; row< 4; row++)
 1b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <row>
 1b6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <row+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <row+0x1>
 1c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <row>
 1c4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <row>
 1c8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <row+0x1>
 1cc:	24 30       	cpi	r18, 0x04	; 4
 1ce:	31 05       	cpc	r19, r1
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <scankey+0xc2>
 1d2:	a4 cf       	rjmp	.-184    	; 0x11c <scankey+0xa>
	}
		}
		
		PORTD |= (1<<(row+4));					//Set PORT back to HIGH after checking entire row
	}
}
 1d4:	08 95       	ret

000001d6 <Scan_Timer2>:
calculate OCRA, (4ms*16M) / 256 = 250
because it is 250, we use the 256 pre scaler
*/
void Scan_Timer2(void)
{
	OCR2A = 250;							// Setting OCR2A to 4ms
 1d6:	8a ef       	ldi	r24, 0xFA	; 250
 1d8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1 << WGM21);					// ENABLE CTC mode
 1dc:	e0 eb       	ldi	r30, 0xB0	; 176
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);					// Set Pre Scaler to 256
 1e6:	e1 eb       	ldi	r30, 0xB1	; 177
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);				// ENABLE the ISR COMPA
 1f0:	e0 e7       	ldi	r30, 0x70	; 112
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	80 83       	st	Z, r24
 1fa:	08 95       	ret

000001fc <__vector_7>:
}

ISR (TIMER2_COMPA_vect)		
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	scankey();
 21e:	0e 94 89 00 	call	0x112	; 0x112 <scankey>
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <freq_Timer0>:
OCROA = (1.1ms) / (256/16000000) = 68.75
I will be rounding up to 69
 */
void freq_Timer0(void)						
{
	OCR0A = 69;								// Setting OCRA to 1.1ms			
 244:	85 e4       	ldi	r24, 0x45	; 69
 246:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << WGM01);					// ENABLE CTC mode
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);					// Set Pre Scaler 256 
 24e:	85 b5       	in	r24, 0x25	; 37
 250:	84 60       	ori	r24, 0x04	; 4
 252:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A)|(1 << OCIE0B);	// ENABLE the ISR COMPA and COMPB 
 254:	ee e6       	ldi	r30, 0x6E	; 110
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	86 60       	ori	r24, 0x06	; 6
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <__vector_14>:
}


ISR (TIMER0_COMPA_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
	if(OCR0B != 0)
 26c:	88 b5       	in	r24, 0x28	; 40
 26e:	88 23       	and	r24, r24
 270:	19 f0       	breq	.+6      	; 0x278 <__vector_14+0x18>
	LED_ON;
 272:	85 b1       	in	r24, 0x05	; 5
 274:	80 62       	ori	r24, 0x20	; 32
 276:	85 b9       	out	0x05, r24	; 5
}
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_15>:

ISR (TIMER0_COMPB_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
	if(OCR0B < 250)
 290:	88 b5       	in	r24, 0x28	; 40
 292:	8a 3f       	cpi	r24, 0xFA	; 250
 294:	18 f4       	brcc	.+6      	; 0x29c <__vector_15+0x18>
	LED_OFF;
 296:	85 b1       	in	r24, 0x05	; 5
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	85 b9       	out	0x05, r24	; 5
}
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:

int main(void)
{
	cli();	// DISABLE global Interrupts
 2a8:	f8 94       	cli
	Keypad_intlize();
 2aa:	0e 94 79 00 	call	0xf2	; 0xf2 <Keypad_intlize>
	Scan_Timer2();
 2ae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Scan_Timer2>
	freq_Timer0();
 2b2:	0e 94 22 01 	call	0x244	; 0x244 <freq_Timer0>
	sei();	// ENABLE global Interrupts
 2b6:	78 94       	sei
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <main+0x10>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
