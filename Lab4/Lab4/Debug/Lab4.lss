
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000972  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c4  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000448  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#include <avr/io.h>

int main(void)
{
	
	OCR0A = 155;	// amount of time to reach max
  cc:	8b e9       	ldi	r24, 0x9B	; 155
  ce:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;		// affected by push
  d0:	18 bc       	out	0x28, r1	; 40
	
	//B7 is the button
	//B5 is the light on the board
	DDRB &= ~(1<<7); //enables button
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<7); //output
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<5); // light
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	84 b9       	out	0x04, r24	; 4
	
	//timers
	TCCR0A |= (1<<WGM01);	//WGM01 = enabling CTC mode (Clear Timer on Compare)
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);	//book page 108, (101 = clk/1024)
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	85 bd       	out	0x25, r24	; 37
		
    while (1) 
    {
		PORTB |= (1<<5);					// led on
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	85 b9       	out	0x05, r24	; 5
		while ( (TIFR0 & (1<<OCF0B) ) == 0){}	//when flag from OCR0B
  f6:	aa 9b       	sbis	0x15, 2	; 21
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x2a>
			TIFR0 |= (1<<OCF0B);				// reset flag 
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	85 bb       	out	0x15, r24	; 21
		
		PORTB &= ~(1<<5);					// led off
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	85 b9       	out	0x05, r24	; 5
		while ( (TIFR0 & (1<<OCF0A) ) == 0){}	//when flag from OCR0A
 106:	a9 9b       	sbis	0x15, 1	; 21
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x3a>
			TIFR0 |= (1<<OCF0A);				// reset flag 
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	85 bb       	out	0x15, r24	; 21
			
		if(!(PINB & (1<<7))  && (OCR0B < OCR0A)) //when button is pushed
 110:	1f 99       	sbic	0x03, 7	; 3
 112:	07 c0       	rjmp	.+14     	; 0x122 <main+0x56>
 114:	98 b5       	in	r25, 0x28	; 40
 116:	87 b5       	in	r24, 0x27	; 39
 118:	98 17       	cp	r25, r24
 11a:	18 f4       	brcc	.+6      	; 0x122 <main+0x56>
		{
			OCR0B++;	//increments duty cycle until OCR0B = OCR0A
 11c:	88 b5       	in	r24, 0x28	; 40
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	88 bd       	out	0x28, r24	; 40
		}
		
		if (PINB &(1<<7) && (OCR0B >0))	//when button is not pushed
 122:	1f 9b       	sbis	0x03, 7	; 3
 124:	e5 cf       	rjmp	.-54     	; 0xf0 <main+0x24>
 126:	88 b5       	in	r24, 0x28	; 40
 128:	88 23       	and	r24, r24
 12a:	11 f3       	breq	.-60     	; 0xf0 <main+0x24>
		{
			OCR0B--;	//increments duty cycle until OCR0B = 0
 12c:	88 b5       	in	r24, 0x28	; 40
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	88 bd       	out	0x28, r24	; 40
 132:	de cf       	rjmp	.-68     	; 0xf0 <main+0x24>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
